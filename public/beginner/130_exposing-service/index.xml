<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exposing a Service on Amazon EKS Roadshow</title>
    <link>//localhost:1313/beginner/130_exposing-service/</link>
    <description>Recent content in Exposing a Service on Amazon EKS Roadshow</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Apr 2019 00:00:00 -0300</lastBuildDate><atom:link href="//localhost:1313/beginner/130_exposing-service/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Connecting Applications with Services</title>
      <link>//localhost:1313/beginner/130_exposing-service/connecting/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 -0300</pubDate>
      
      <guid>//localhost:1313/beginner/130_exposing-service/connecting/</guid>
      <description>Before discussing the Kubernetes approach to networking, it is worthwhile to contrast it with the “normal” way networking works with Docker.
By default, Docker uses host-private networking, so containers can talk to other containers only if they are on the same machine. In order for Docker containers to communicate across nodes, there must be allocated ports on the machine’s own IP address, which are then forwarded or proxied to the containers.</description>
    </item>
    
    <item>
      <title>Accessing the Service</title>
      <link>//localhost:1313/beginner/130_exposing-service/accessing/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 -0300</pubDate>
      
      <guid>//localhost:1313/beginner/130_exposing-service/accessing/</guid>
      <description>Accessing the Service Kubernetes is able to find services using DNS.
DNS requires the CoreDNS cluster add-on (this was automatically installed when creating the EKS cluster).
Let’s test the DNS name using a &amp;ldquo;curl&amp;rdquo; based application:
kubectl -n my-nginx run curl --image=radial/busyboxplus:curl -i --tty Then, hit enter and run.
nslookup my-nginx Output: Server: 10.100.0.10 Address 1: 10.100.0.10 kube-dns.kube-system.svc.cluster.local Name: my-nginx Address 1: 10.100.225.196 my-nginx.my-nginx.svc.cluster.local  Type exit to log out of the container.</description>
    </item>
    
    <item>
      <title>Exposing the Service</title>
      <link>//localhost:1313/beginner/130_exposing-service/exposing/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 -0300</pubDate>
      
      <guid>//localhost:1313/beginner/130_exposing-service/exposing/</guid>
      <description>Exposing the Service For some parts of your applications you may want to expose a Service onto an external IP address. Kubernetes supports two ways of doing this: NodePort and LoadBalancer.
kubectl -n my-nginx get svc my-nginx Output NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE my-nginx ClusterIP 10.100.225.196 &amp;lt;none&amp;gt; 80/TCP 33m  Currently the Service does not have an External IP, so let’s now patch the Service to use a cloud load balancer, by updating the type of the my-nginx Service from ClusterIP to LoadBalancer:</description>
    </item>
    
    <item>
      <title>Clean Up</title>
      <link>//localhost:1313/beginner/130_exposing-service/cleaning/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 -0300</pubDate>
      
      <guid>//localhost:1313/beginner/130_exposing-service/cleaning/</guid>
      <description>Cleaning up To delete the resources used in this chapter:
kubectl delete -f ~/environment/run-my-nginx.yaml kubectl delete ns my-nginx rm ~/environment/run-my-nginx.yaml </description>
    </item>
    
  </channel>
</rss>
